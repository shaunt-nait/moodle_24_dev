Installation of rev 1.7.:
------------------------

0) make sure the phpsoap extension (for php5 !)  in installed on the Moodle server
and on your future clients if you plan to write clients in PHP. Using nusoap
provided in wspp/lib  folder is supported (on client only) but with a big penalty
 of speed and memory ... 

1) unzip the wspp_xxx.zip into your main Moodle installation folder

2) you should get a top level directory named wspp

--


MOODLE 1.9 :
---------------

2) copy wspp/lang/fr_utf8/local_wspp.php (and possibly other languages files) 
into your moodledata/lang/en_utf8_local folder . You may have to create
this folder. This will prevent future upgrades of moodle languages packs to
erase it.

3) edit moodle/admin/settings/misc.php and add the line 

	 require("$CFG->dirroot/wspp/admin/wspp.php"); 
 
     just before this line 
     // hidden scripts linked from elsewhere

 4) go to the Administration of your Moodle site and set the new configuration options.
 You may later modify them in Administration/misc/OK Tech Webservice area.
 For first testings make sure ws_enforceipcheck is off... 
      
 
 5) Note that the database upgrade is done at the first call ever made to the WebService
  (even unsuccessfull). It will add two tables mdl_webservices_sessions and 
  mdl_webservices_clients_allow
 
 
 MOODLE 2.0
 -----------
 2) just copy wspp/local directory into Moodle 2.0 local directory
 
 3) go to administration, notifications to install it
 
 4) you should get a new configuration screen named OK Tech Webservices (aka wspp) inside 
 Site Adminstration/ Development 
 
 5) Database upgrade is done at this stage  
 
 ALL MOODLE VERSIONS :
 -------------------- 
 
 6) test the Web Service login operation. The easiest way is surely using SoapUI graphical
 interface. 
    - create a new Wsdl project with URL http://yourmoodle/wspp/wsdl_pp.php .
    - test login operation, and if successfull, copy the returned client number and sessionkey
    in the corresponding input fields of other operations
 
 7) you may also test it in php : 
 
 - on the server go to wspp/clients and run the following 
        php ../wsdl2php.php http://yourmoodle/wspp/wsdl_pp.php  
 - this will generate all needed classes and many tests scripts into the folder wspp/clients/tests
 - rename file auth.php.dist to auth.php and edit it to provide a login/passowrd of an admin
 Moodle user (to start with)... 
 - go to wspp/clients/tests folder and run first test by php test_get_roles.php (a script that
 do not need any editing). If successfull, you may try to edit some other tests scripts
 to fill the missing parameters.
 - for example edit test_get_users_bycourse.php and replace the empty strings by some real values
 
 $res=$moodle->get_users_bycourse($lr->getClient(),$lr->getSessionKey(),'','',0);
 
 to read
 
 $res=$moodle->get_users_bycourse($lr->getClient(),$lr->getSessionKey(),
               'theshortnameofoneofyourcourse',
               'shortname',0);
       
  
 - for a more complex example : see test_add_user.php (you may remove lines containing empty values
 that you do not want to set ). 
 
 
 - now you can test access from remote clients by copying (only) the scripts wsdl2php.php and auth.php
 somewhere on these clients and repeat the class generation by running
    php wsdl2php.php http://yourmoodle/wspp/wsdl_pp.php
 
 8) You will  find in the wspp/clients directory others examples in python, java ... 
  
 9) (available with revision 1.6.1) to avoid disclosing a real admin login/password to developpers of other information systems
 you should install the new authentification plugin located in wspp/auth/webservice.
 Copy this folder into moodle/auth folder and go to your site adminisration/accounts/authentification
 and enable the Web Service plugin. Then create a new account on your Moodle site, say wsaccess
 and set webservice as the authentification method.  Give to this account all the required
 capabilities compatible with your site security and the operations you want to allow ...
 (for example if you do not want any add_user, add_course ..., don't give him the corresponding
 capabilities).    
 Now developpers of external informations systems, connecting to Moodle via this Web service
 account will not be allowed to connect the "regular way"... 
 
 10) security issue : in a real server, you should enable ws_enforceipcheck and add( currently
 with phpmyadmin) the ip addresses of clients allowed to connect into table mdl_webservices_clients_allow.
 (settings in admin screen are planned in the future). 
 
 11) you should also remove the wspp/clients directory to avoid direct calls (or make
 it unavailable by the Web with an approriate .htaccess file)  
 
 12) Enjoy ;-)
        