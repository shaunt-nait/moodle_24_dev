################################################## 
# MoodleWS_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl
##############################

class ns0:
    targetNamespace = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"

    class userRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "userRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.userRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="confirmed", aname="_confirmed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="policyagreed", aname="_policyagreed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="deleted", aname="_deleted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="idnumber", aname="_idnumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email", aname="_email", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="icq", aname="_icq", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="skype", aname="_skype", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="yahoo", aname="_yahoo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aim", aname="_aim", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="msn", aname="_msn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="phone1", aname="_phone1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="phone2", aname="_phone2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="institution", aname="_institution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="department", aname="_department", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="city", aname="_city", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lang", aname="_lang", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timezone", aname="_timezone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastip", aname="_lastip", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="role", aname="_role", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._confirmed = None
                    self._policyagreed = None
                    self._deleted = None
                    self._username = None
                    self._idnumber = None
                    self._firstname = None
                    self._lastname = None
                    self._email = None
                    self._icq = None
                    self._skype = None
                    self._yahoo = None
                    self._aim = None
                    self._msn = None
                    self._phone1 = None
                    self._phone2 = None
                    self._institution = None
                    self._department = None
                    self._address = None
                    self._city = None
                    self._country = None
                    self._lang = None
                    self._timezone = None
                    self._lastip = None
                    self._description = None
                    self._role = None
                    return
            Holder.__name__ = "userRecord_Holder"
            self.pyclass = Holder

    class groupRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "groupRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.groupRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="courseid", aname="_courseid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lang", aname="_lang", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="theme", aname="_theme", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="picture", aname="_picture", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="hidepicture", aname="_hidepicture", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timecreated", aname="_timecreated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timemodified", aname="_timemodified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._courseid = None
                    self._name = None
                    self._description = None
                    self._lang = None
                    self._theme = None
                    self._picture = None
                    self._hidepicture = None
                    self._timecreated = None
                    self._timemodified = None
                    return
            Holder.__name__ = "groupRecord_Holder"
            self.pyclass = Holder

    class courseRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "courseRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.courseRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="category", aname="_category", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="sortorder", aname="_sortorder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fullname", aname="_fullname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shortname", aname="_shortname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="idnumber", aname="_idnumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="summary", aname="_summary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="showgrades", aname="_showgrades", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="newsitems", aname="_newsitems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teacher", aname="_teacher", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teachers", aname="_teachers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="student", aname="_student", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="students", aname="_students", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="guest", aname="_guest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="startdate", aname="_startdate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="enrolperiod", aname="_enrolperiod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="numsections", aname="_numsections", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="marker", aname="_marker", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="maxbytes", aname="_maxbytes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="visible", aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="hiddensections", aname="_hiddensections", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="groupmode", aname="_groupmode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="groupmodeforce", aname="_groupmodeforce", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lang", aname="_lang", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="theme", aname="_theme", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cost", aname="_cost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timecreated", aname="_timecreated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timemodified", aname="_timemodified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="metacourse", aname="_metacourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._category = None
                    self._sortorder = None
                    self._password = None
                    self._fullname = None
                    self._shortname = None
                    self._idnumber = None
                    self._summary = None
                    self._format = None
                    self._showgrades = None
                    self._newsitems = None
                    self._teacher = None
                    self._teachers = None
                    self._student = None
                    self._students = None
                    self._guest = None
                    self._startdate = None
                    self._enrolperiod = None
                    self._numsections = None
                    self._marker = None
                    self._maxbytes = None
                    self._visible = None
                    self._hiddensections = None
                    self._groupmode = None
                    self._groupmodeforce = None
                    self._lang = None
                    self._theme = None
                    self._cost = None
                    self._timecreated = None
                    self._timemodified = None
                    self._metacourse = None
                    return
            Holder.__name__ = "courseRecord_Holder"
            self.pyclass = Holder

    class userDatum_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "userDatum")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.userDatum_Def.schema
            TClist = [ZSI.TC.String(pname="action", aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="confirmed", aname="_confirmed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="policyagreed", aname="_policyagreed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="deleted", aname="_deleted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auth", aname="_auth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="idnumber", aname="_idnumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email", aname="_email", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="icq", aname="_icq", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="skype", aname="_skype", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="yahoo", aname="_yahoo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aim", aname="_aim", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="msn", aname="_msn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="phone1", aname="_phone1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="phone2", aname="_phone2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="institution", aname="_institution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="department", aname="_department", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="city", aname="_city", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lang", aname="_lang", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timezone", aname="_timezone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastip", aname="_lastip", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="mnethostid", aname="_mnethostid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._action = None
                    self._confirmed = None
                    self._policyagreed = None
                    self._deleted = None
                    self._username = None
                    self._auth = None
                    self._password = None
                    self._idnumber = None
                    self._firstname = None
                    self._lastname = None
                    self._email = None
                    self._icq = None
                    self._skype = None
                    self._yahoo = None
                    self._aim = None
                    self._msn = None
                    self._phone1 = None
                    self._phone2 = None
                    self._institution = None
                    self._department = None
                    self._address = None
                    self._city = None
                    self._country = None
                    self._lang = None
                    self._timezone = None
                    self._lastip = None
                    self._description = None
                    self._mnethostid = None
                    return
            Holder.__name__ = "userDatum_Holder"
            self.pyclass = Holder

    class courseDatum_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "courseDatum")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.courseDatum_Def.schema
            TClist = [ZSI.TC.String(pname="action", aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="category", aname="_category", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="sortorder", aname="_sortorder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fullname", aname="_fullname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shortname", aname="_shortname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="idnumber", aname="_idnumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="summary", aname="_summary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="showgrades", aname="_showgrades", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="newsitems", aname="_newsitems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teacher", aname="_teacher", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teachers", aname="_teachers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="student", aname="_student", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="students", aname="_students", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="guest", aname="_guest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="startdate", aname="_startdate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="enrolperiod", aname="_enrolperiod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="numsections", aname="_numsections", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="marker", aname="_marker", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="maxbytes", aname="_maxbytes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="visible", aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="hiddensections", aname="_hiddensections", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="groupmode", aname="_groupmode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="groupmodeforce", aname="_groupmodeforce", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lang", aname="_lang", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="theme", aname="_theme", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cost", aname="_cost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timecreated", aname="_timecreated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timemodified", aname="_timemodified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="metacourse", aname="_metacourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._action = None
                    self._id = None
                    self._category = None
                    self._sortorder = None
                    self._password = None
                    self._fullname = None
                    self._shortname = None
                    self._idnumber = None
                    self._summary = None
                    self._format = None
                    self._showgrades = None
                    self._newsitems = None
                    self._teacher = None
                    self._teachers = None
                    self._student = None
                    self._students = None
                    self._guest = None
                    self._startdate = None
                    self._enrolperiod = None
                    self._numsections = None
                    self._marker = None
                    self._maxbytes = None
                    self._visible = None
                    self._hiddensections = None
                    self._groupmode = None
                    self._groupmodeforce = None
                    self._lang = None
                    self._theme = None
                    self._cost = None
                    self._timecreated = None
                    self._timemodified = None
                    self._metacourse = None
                    return
            Holder.__name__ = "courseDatum_Holder"
            self.pyclass = Holder

    class gradeRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "gradeRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gradeRecord_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="maxgrade", aname="_maxgrade", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="grade", aname="_grade", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="percent", aname="_percent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="weight", aname="_weight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="weighted", aname="_weighted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="sortOrder", aname="_sortOrder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._maxgrade = None
                    self._grade = None
                    self._percent = None
                    self._weight = None
                    self._weighted = None
                    self._sortOrder = None
                    return
            Holder.__name__ = "gradeRecord_Holder"
            self.pyclass = Holder

    class gradeStatsRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "gradeStatsRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gradeStatsRecord_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname="gradeItems", aname="_gradeItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="allgrades", aname="_allgrades", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="points", aname="_points", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="totalpoints", aname="_totalpoints", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="percent", aname="_percent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="weight", aname="_weight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="weighted", aname="_weighted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gradeItems = None
                    self._allgrades = None
                    self._points = None
                    self._totalpoints = None
                    self._percent = None
                    self._weight = None
                    self._weighted = None
                    return
            Holder.__name__ = "gradeStatsRecord_Holder"
            self.pyclass = Holder

    class studentRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "studentRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.studentRecord_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname="userid", aname="_userid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="course", aname="_course", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timestart", aname="_timestart", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timeend", aname="_timeend", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timeaccess", aname="_timeaccess", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="enrol", aname="_enrol", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userid = None
                    self._course = None
                    self._timestart = None
                    self._timeend = None
                    self._timeaccess = None
                    self._enrol = None
                    return
            Holder.__name__ = "studentRecord_Holder"
            self.pyclass = Holder

    class eventRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "eventRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.eventRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="courseid", aname="_courseid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="groupid", aname="_groupid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="userid", aname="_userid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="repeatid", aname="_repeatid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="modulename", aname="_modulename", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="instance", aname="_instance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="eventtype", aname="_eventtype", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timestart", aname="_timestart", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timeduration", aname="_timeduration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="visible", aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="uuid", aname="_uuid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="sequence", aname="_sequence", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timemodified", aname="_timemodified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._name = None
                    self._description = None
                    self._format = None
                    self._courseid = None
                    self._groupid = None
                    self._userid = None
                    self._repeatid = None
                    self._modulename = None
                    self._instance = None
                    self._eventtype = None
                    self._timestart = None
                    self._timeduration = None
                    self._visible = None
                    self._uuid = None
                    self._sequence = None
                    self._timemodified = None
                    return
            Holder.__name__ = "eventRecord_Holder"
            self.pyclass = Holder

    class changeRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "changeRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.changeRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="courseid", aname="_courseid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="instance", aname="_instance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="resid", aname="_resid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="date", aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timestamp", aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="author", aname="_author", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="link", aname="_link", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="visible", aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._courseid = None
                    self._instance = None
                    self._resid = None
                    self._name = None
                    self._date = None
                    self._timestamp = None
                    self._type = None
                    self._author = None
                    self._link = None
                    self._url = None
                    self._visible = None
                    return
            Holder.__name__ = "changeRecord_Holder"
            self.pyclass = Holder

    class roleRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "roleRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.roleRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shortname", aname="_shortname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="sortorder", aname="_sortorder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._name = None
                    self._shortname = None
                    self._description = None
                    self._sortorder = None
                    return
            Holder.__name__ = "roleRecord_Holder"
            self.pyclass = Holder

    class categoryRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "categoryRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.categoryRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="parent", aname="_parent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="sortorder", aname="_sortorder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="coursecount", aname="_coursecount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="visible", aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="timemodified", aname="_timemodified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="depth", aname="_depth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._name = None
                    self._description = None
                    self._parent = None
                    self._sortorder = None
                    self._coursecount = None
                    self._visible = None
                    self._timemodified = None
                    self._depth = None
                    self._path = None
                    return
            Holder.__name__ = "categoryRecord_Holder"
            self.pyclass = Holder

    class userRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "userRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.userRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'userRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class groupRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "groupRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.groupRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'groupRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class userData_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "userData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.userDatum_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'userDatum[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class courseRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "courseRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.courseRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'courseRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class courseData_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "courseData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.courseDatum_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'courseDatum[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gradeRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "gradeRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gradeRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'gradeRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class studentGradeRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "studentGradeRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.studentGradeRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="courseid", aname="_courseid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","gradeStatsRecord",lazy=False)(pname="stats", aname="_stats", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","gradeRecords",lazy=False)(pname="grades", aname="_grades", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._courseid = None
                    self._stats = None
                    self._grades = None
                    return
            Holder.__name__ = "studentGradeRecord_Holder"
            self.pyclass = Holder

    class studentGradeRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "studentGradeRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.studentGradeRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'studentGradeRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class studentRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "studentRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.studentRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'studentRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class roleRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "roleRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.roleRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'roleRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class eventRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "eventRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.eventRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'eventRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class categoryRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "categoryRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.categoryRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'categoryRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class changeRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "changeRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.changeRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'changeRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class loginReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "loginReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.loginReturn_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname="client", aname="_client", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionkey", aname="_sessionkey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._client = None
                    self._sessionkey = None
                    return
            Holder.__name__ = "loginReturn_Holder"
            self.pyclass = Holder

    class editUsersInput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "editUsersInput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.editUsersInput_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","userData",lazy=False)(pname="users", aname="_users", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._users = None
                    return
            Holder.__name__ = "editUsersInput_Holder"
            self.pyclass = Holder

    class editUsersOutput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "editUsersOutput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.editUsersOutput_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","userRecords",lazy=False)(pname="users", aname="_users", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._users = None
                    return
            Holder.__name__ = "editUsersOutput_Holder"
            self.pyclass = Holder

    class getUsersInput_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getUsersInput")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class getUsersReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getUsersReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getUsersReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","userRecords",lazy=False)(pname="users", aname="_users", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._users = None
                    return
            Holder.__name__ = "getUsersReturn_Holder"
            self.pyclass = Holder

    class editCoursesInput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "editCoursesInput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.editCoursesInput_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","courseData",lazy=False)(pname="courses", aname="_courses", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courses = None
                    return
            Holder.__name__ = "editCoursesInput_Holder"
            self.pyclass = Holder

    class editCoursesOutput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "editCoursesOutput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.editCoursesOutput_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","courseRecords",lazy=False)(pname="courses", aname="_courses", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courses = None
                    return
            Holder.__name__ = "editCoursesOutput_Holder"
            self.pyclass = Holder

    class getCoursesInput_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getCoursesInput")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class getCoursesReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getCoursesReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getCoursesReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","courseRecords",lazy=False)(pname="courses", aname="_courses", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courses = None
                    return
            Holder.__name__ = "getCoursesReturn_Holder"
            self.pyclass = Holder

    class getGradesInput_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getGradesInput")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class getGradesReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getGradesReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getGradesReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","studentGradeRecords",lazy=False)(pname="grades", aname="_grades", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._grades = None
                    return
            Holder.__name__ = "getGradesReturn_Holder"
            self.pyclass = Holder

    class enrolStudentsInput_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "enrolStudentsInput")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class enrolStudentsReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "enrolStudentsReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.enrolStudentsReturn_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","studentRecords",lazy=False)(pname="students", aname="_students", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._students = None
                    return
            Holder.__name__ = "enrolStudentsReturn_Holder"
            self.pyclass = Holder

    class getRolesReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getRolesReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRolesReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","roleRecords",lazy=False)(pname="roles", aname="_roles", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._roles = None
                    return
            Holder.__name__ = "getRolesReturn_Holder"
            self.pyclass = Holder

    class getGroupsReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getGroupsReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getGroupsReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","groupRecords",lazy=False)(pname="groups", aname="_groups", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groups = None
                    return
            Holder.__name__ = "getGroupsReturn_Holder"
            self.pyclass = Holder

    class getEventsReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getEventsReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getEventsReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","eventRecords",lazy=False)(pname="events", aname="_events", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._events = None
                    return
            Holder.__name__ = "getEventsReturn_Holder"
            self.pyclass = Holder

    class getLastChangesReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getLastChangesReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getLastChangesReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","changeRecords",lazy=False)(pname="changes", aname="_changes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._changes = None
                    return
            Holder.__name__ = "getLastChangesReturn_Holder"
            self.pyclass = Holder

    class getCategoriesReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getCategoriesReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getCategoriesReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","categoryRecords",lazy=False)(pname="categories", aname="_categories", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categories = None
                    return
            Holder.__name__ = "getCategoriesReturn_Holder"
            self.pyclass = Holder

    class activityRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "activityRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activityRecord_Def.schema
            TClist = [ZSI.TC.String(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="time", aname="_time", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="userid", aname="_userid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ip", aname="_ip", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="course", aname="_course", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="module", aname="_module", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="cmid", aname="_cmid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="action", aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="info", aname="_info", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DATE", aname="_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auth", aname="_auth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email", aname="_email", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="firstaccess", aname="_firstaccess", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="lastaccess", aname="_lastaccess", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="lastlogin", aname="_lastlogin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="currentlogin", aname="_currentlogin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DLA", aname="_DLA", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DFA", aname="_DFA", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DLL", aname="_DLL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DCL", aname="_DCL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._id = None
                    self._time = None
                    self._userid = None
                    self._ip = None
                    self._course = None
                    self._module = None
                    self._cmid = None
                    self._action = None
                    self._url = None
                    self._info = None
                    self._DATE = None
                    self._auth = None
                    self._firstname = None
                    self._lastname = None
                    self._email = None
                    self._firstaccess = None
                    self._lastaccess = None
                    self._lastlogin = None
                    self._currentlogin = None
                    self._DLA = None
                    self._DFA = None
                    self._DLL = None
                    self._DCL = None
                    return
            Holder.__name__ = "activityRecord_Holder"
            self.pyclass = Holder

    class activityRecords_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "activityRecords")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.activityRecord_Def(None, typed=False)
            atype = (u'http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl', u'activityRecord[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class getActivitiesReturn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl"
        type = (schema, "getActivitiesReturn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getActivitiesReturn_Def.schema
            TClist = [GTD("http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl","activityRecords",lazy=False)(pname="activities", aname="_activities", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._activities = None
                    return
            Holder.__name__ = "getActivitiesReturn_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://cipcnet.insa-lyon.fr/moodle/wspp/wsdl)
