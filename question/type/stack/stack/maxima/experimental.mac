/*  Author Chris Sangwin
    University of Birmingham
    Copyright (C) 2013 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */


/* THIS IS EXPERIMENTAL CODE */
/* Currently this is under development by CJS and is not connected to the main STACK codebase */
/* It sits here because the long-term goal is to incorporate it */

/* More general random function - recurses across the structure.
   Notice the use of the dummy "protect()" function to stop further evaluation.
   E.g.
   rand_recurse((5+protect(2))*x^protect(2)+3*x+7);
   rand_recurse(sin([x,y,z]));
*/
rand_recurse(ex) := block(
    if (integerp(ex) or floatnump(ex) or matrixp(ex) or listp(ex)) then return(rand(ex)),
    if atom(ex) then return(ex),
    if op(ex)=protect then return(first(args(ex))),
    apply(op(ex),maplist(rand_recurse,args(ex)))
    );

/* Truncates a polynomial to only terms of degree "d" or less - always expands out */
poly_truncate(pa,d) := apply("+",maplist(lambda([ex],if hipow(ex,x)>d then 0 else ex), args(expand(pa))));

/****************************************************************/
/*  Inequality functions for STACK                              */
/*                                                              */
/*  Chris Sangwin, <chris@sangwin.com>                          */
/*  V0.2 July 2013                                              */
/*                                                              */
/****************************************************************/

/* Determines if we have a linear inequality in one variable */
linear_inequalityp(ex) := block([ex2],
   if atom(ex) then return(false),
   if not(">"= op(ex) or "<"= op(ex) or ">="= op(ex) or "<="= op(ex)) then return(false),
   ex2:ineqprepare(ex),
   if not(is(length(listofvars(ex2))=1)) then return(false),
   if is(degree(lhs(ex2),first(listofvars(ex2)))=1) then return(true),
   return(false)
)$


/* Reverses the inequality: purely syntactic. */
rev_ineq(ex):=block(
  if safe_op(ex)="<" then return(rhs(ex)>lhs(ex)),
  if safe_op(ex)="<=" then return(rhs(ex)>=lhs(ex)),
  if safe_op(ex)=">" then return(rhs(ex)<lhs(ex)),
  if safe_op(ex)=">=" then return(rhs(ex)<=lhs(ex)),
  return(ex)
)$

/* Reformat an inequality in an easier to read form, namely a<x or x<a: a syntactic transformation. */
inequality_disp(ex):=block([ex2,v],
  if not(linear_inequalityp(ex)) then return(ex),
  ex2:ineqprepare(ex),
  v:first(listofvars(ex2)),
  if equal(coeff(lhs(ex2),v),1) then return(rev_ineq(subst(op(ex2),"=",first(solve(lhs(ex2),v))))),
  if equal(coeff(lhs(ex2),v),-1) then return(neg_ineq(subst(op(ex2),"=",first(solve(lhs(ex2),v))))),
  return(ex)
)$

/* Does the expression define a *single* interval, by means of an inequality?   */
/* E.g. 1<x and x<7                                                             */
/* We only accept linear inequalities in one variable, combined by "and"        */
/* We don't expect this to be the *simplest* form, that is later.               */ 
/* A single inequality is a half open interval.                                 */
/* true is the whole real line, false is the empty set.                         */
interval_inequalityp(ex):= block(
   /* Emptyset and real line. */
   if equal(ex, true) then return(true),
   if equal(ex, false) then return(true),
   if atom(ex) then return(false),
   /* Half open intervals */
   if linear_inequalityp(ex) then return(true),
   if not(op(ex)="and") then return(false),
   if is(length(listofvars(ex))>1) then return(false),
   return(all_listp(linear_inequalityp, args(ex)))
)$

/* Takes a real interval and returns the canonical form for this inequality  */
/* a<x and x<b                                                               */
/* or, true, false, or a single inequality                                   */
interval_simplify(ex):=block([ex2,v,a,b],
   if not(interval_inequalityp(ex)) then return(ex),
   /* We know we have an interval inequality. */
   if equal(ex, true) then return(true),
   if equal(ex, false) then return(false),
   /* Remove redundant inequalities: might leave us with a single one. */
   ex:ineq_rem_redundant(ex),
   if linear_inequalityp(ex) then return(inequality_disp(ex)),
   /* Now we are in business.  We have a single interval, of two inequalities. */
   ex:map(inequality_disp,ex),
   v:listofvars(ex),
   if equal(v,lhs(first(ex))) then ex:second(args(ex)) and first(args(ex)),
   /* This should now be in the right form. */
   /* Check for an empty set (2 possibilities) */
   if (lhs(first(args(ex))))>(rhs(second(args(ex)))) then return(false),
   if (lhs(first(args(ex))))=(rhs(second(args(ex)))) and not(safe_op(first(args(ex)))="<=" and safe_op(second(args(ex)))="<=") then return(false), 
   ex
)$

/* This removes redundant linear inequalities such as x>1 or x>0 -> x>0 */
ineq_rem_redundant(ex) := block([exl,exn,exg,exl,exo,exv],
  if atom(ex) then return(ex),
  if not(op(ex)="and" or op(ex)="or") then return(ex),
  /* Recurse over the expression */
  ex:apply(op(ex),maplist(ineq_rem_redundant,args(ex))),
  if op(ex)="and" then exo:[max,min] else exo:[min,max],
  exn:sublist(args(ex),lambda([ex2],not(linear_inequalityp(ex2)))),  
  exl:sublist(args(ex),linear_inequalityp),
  /* Separate out different variables */
  exv:listofvars(exl),
  exl:maplist(lambda([ex],sublist(exl,lambda([ex2],is(listofvars(ex2)=[ex])))),exv),
  /* At this point we have linear inequalities, in a single variable, separated out into lists for each individual variable. */
  exl:maplist(lambda([ex],single_linear_ineq_reduce(ex,exo)),exl),
  exl:flatten(exl),
  apply(op(ex),append(exn,exl))
  )$

/* Take a list of linear inequalities the same single variable, and an list of operators, min/max.  
   Returns the equivalent inequalities.
*/
single_linear_ineq_reduce(ex,exo):=block([exg,exl],
  ex:maplist(ineqprepare,ex),
  /* Separate out into x>?, x>=? and x<?, x<=?. */
  exg:sublist(ex,lambda([ex2],is(coeff(lhs(ex2),first(listofvars(ex2)))=1))),
  exl:sublist(ex,lambda([ex2],is(coeff(lhs(ex2),first(listofvars(ex2)))=-1))),
  /* Separate into solution and operator */
  exg:single_linear_ineq_reduce_h(exg,first(exo),true),
  exl:single_linear_ineq_reduce_h(exl,second(exo),false),
  append(exg,exl)
)$

/* Take a list of linear inequalities of the same sign, in a single variable, and an operator, min/max.  
   Return the single equivalent inequality.
*/
single_linear_ineq_reduce_h(exl,exo,odr):=block([m1,m2,m3,exg],
  if exl=[] then return([]),
  if not(is(exo=max) or is(exo=min)) then print("ERROR: single_linear_ineq_reduce_h expects second argument to be max or min."),
  exg:maplist(lambda([ex2],[rhs(first(solve(lhs(ex2)))),op(ex2)]),exl),
  m1:apply(exo, maplist(first,exg)),
  m2:sublist(exg,lambda([ex2],is(m1=first(ex2)))),
  m3:sort(listify(setify(maplist(second,m2)))), /* get list of operators.  Used to sort out >, >= etc. */
  if (not(odr) and is(exo=max)) or (odr and is(exo=min)) then m3:reverse(m3),
  [apply(first(m3),if odr then [first(listofvars(exl)),m1] else [m1,first(listofvars(exl))])]
)$  

/* Solve a single inequality in a single variable by factoring, where possible expressing the result as irreducible inequalities. */
factor_ineq_solve(ex):=block([ex2,ex3,exop,m,fl,p],
   if not(inequalityp(ex)) then return(ex),
   if length(listofvars(ex))#1 then return(ex),
   ex2:ineqprepare(ex),
   exop:op(ex2), /* This is for >, >= */
   ex2:factor(lhs(ex2)),
   if atom(ex2) then return(ex),
   /* Create a list of factors */
   if is(op(ex2)="-") then m:true else m:false,
   if m then fl:first(args(ex2)) else fl:ex2, 
   if safe_op(fl)="*" then fl:args(fl) else fl:[fl],
   /* Turn each inequality back into a list */
   ex2:maplist(lambda([ex],apply(exop,[ex,0])),fl),
   if m then ex2[1]:neg_ineq(ex2[1]),
   /* Create a list of all even permutations, from which we negate those in the list */
   p:sublist(maplist(listify,listify(powerset(setify(makelist(n,n,length(ex2)))))),lambda([ex],evenp(length(ex)))),
   ex3:maplist(lambda([l],neg_ineq_list(copylist(ex2),l)),p),
   /* Tidy up the list */
   ex3:maplist(lambda([ex],ineq_rem_redundant(apply("and",ex))),ex3),
   ex3:maplist(interval_simplify,ex3),
   ex3:reverse(sort(ex3)),
   ex3:apply("or",ex3)
)$

/* Negates the inequality */
neg_ineq(ex):=block(
  if safe_op(ex)="<" then return(lhs(ex)>rhs(ex)),
  if safe_op(ex)="<=" then return(lhs(ex)>=rhs(ex)),
  if safe_op(ex)=">" then return(lhs(ex)<rhs(ex)),
  if safe_op(ex)=">=" then return(lhs(ex)<=rhs(ex)),
  return(ex)
)$

/* This function takes a list of inequalities, ex and a list of index numbers l, and negates each inequality as indexed by l */
neg_ineq_list(ex,l):=block([k],
  if emptyp(l) then return(ex),
  for k: 1 thru length(l) do ex[l[k]]:neg_ineq(ex[l[k]]),
  ex
)$


/****************************************************************/
/*  Reporting support functions for STACK                       */
/*                                                              */
/*  Chris Sangwin, <chris@sangwin.com>                          */
/*  V0.1 January 2013                                           */
/*                                                              */
/****************************************************************/

/* Sample ways of representing a PRT in which we might have errors */

/* Evaluate a single node safely. */
node_no(prt,num,inputs) := block([res,err],
    /* Type checking */
    if not(listp(prt)) then (print("STACK exception: node_no expects its first argument to be a list."), return(false)),
    if not(integerp(num)) then (print("STACK exception: node_no expects its second argument to be an integer."), return(false)),
    if is(length(prt)<num) then (print("STACK exception: node_no expects its second argument to less than the length of the first."), return(false)),
    /* Do computation */
    res:errcatch(ev(prt[num],inputs,nouns)),
    if is([] = res) then 
       print(concat("Previous error generated by node number ", string(num), ".")),
    if is([] = res) then
       [] 
    else 
       first(res)
    );

/* Actually traverse the PRT with given inputs                  */
/* Inputs should be in the form of equations such as [ans1=x^2] */
traverse_prt(inputs) := block(
    /* Type checking */
    if not(listp(inputs)) then (print("STACK exception: traverse_prt expects its argument to be a list."), return(false)),
    if not(alllistp(equationp,inputs)) then (print("STACK exception: traverse_prt expects its argument to be a list of equations."), return(false)),
    /* Setup PRT */
    simp:false,
    PRTtests:[
        'ATAlgEquiv(ans1,x^3),
        'ATInt(ans2,[x^3,x]),
        'ATInt(ans2/0,[x^3,x])
    ],
    quiet:[false,false,false],
    nexttrue:[2,3,1],
    nextfalse:[1,1,1],
    /* Creatlist to store previously visited nodes */
    visited:makelist(false, length(PRTtests)),
    current_node:1,
    feedback:[],
    answernote:[],
    /* Actually traverse the tree */
    while not(visited[current_node]) do block([res],
      visited[current_node]:true,
      res:node_no(PRTtests,current_node,inputs),
      if not(listp(res)) then return(false),
      /* Feedback */
      if not(quiet[current_node]) then feedback:cons(res[4], feedback),
      feedback:cons(concat("[STACK-feedback:",string(current_node),"-",string(res[2]),"]"), feedback),
      /* Answernotes */
      if not(is(res[3] = "")) then answernote:cons(res[3], answernote), 
      answernote:cons(concat(string(current_node),"-",string(res[2])), answernote),
      /* Update to next node */
      if res[2] then
          current_node:nexttrue[current_node]
      else
          current_node:nextfalse[current_node]
    ),
    answernote:simplode(reverse(sublist(answernote, lambda([ex],not(is(ex=""))))), " | " ),
    feedback:simplode(reverse(sublist(feedback, lambda([ex],not(is(ex=""))))), " | " ),
    [answernote, feedback]
)$

print("[ STACK-reports started. ]")$
